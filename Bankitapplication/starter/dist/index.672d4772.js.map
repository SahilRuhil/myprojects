{"mappings":"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","sources":["script.js"],"sourcesContent":["'use strict';\n\n\n/////////////////////////////////////////////////\n// LECTURES\n\n/////////////////////////////////////////////////\n/*\nlet arr = [1, 2, 4, 5, 6];\nlet arr2 = [7, 8, 9, 10, 11, 12];\n// SLICE\nconsole.log(arr.slice(0));\nconsole.log(arr.slice(0, 3));//remember last parameter not accessable\nconsole.log(arr2.slice(0, -2));\nconsole.log(arr);//here we get copy of arr\nconsole.log(...arr);// here we get value\n\n////// SPLICE\n// console.log(arr.splice(3));\n// console.log(arr2.splice(-3));\n// console.log(arr2.splice(-4, 5));\n\n//////// REVERSE //////\n// console.log(arr.reverse());\n// console.log(arr2.reverse());\n\n//////// CONCAT ////////\nlet arr3 = [...arr, ...arr2];\nconsole.log(arr.concat(arr2));\nconsole.log(arr3);\n\n//////// JOIN ////////\nconsole.log(arr3.join('-'));\n\n\n\n/////////// AT METHOD //////\nconsole.log(arr[0]);\nconsole.log(arr.at(0));\nconsole.log(arr.at(3));\nconsole.log(arr.at(-1));\n\nconsole.log(arr[arr.length - 1]);//last method\n\nconsole.log(arr.slice(-1)[0]);\nconst str = 'Aakash yadav';\nconsole.log(str.at(-1));\nconsole.log(str.at(-2));\nconsole.log(str.at(-3));\nconsole.log(str.at(1));\nconsole.log(str.at(2));\n\n\n/////// LOOPING ARRAYS :- for each\nconst movements = [200, 450, -400, 3000, -650, -130, 70, 1300];\n// for (const movement of movements) {\n//   if (movement > 0) {\n//     console.log(`Deposite :- ${movement}`);\n//   } else {\n//     console.log(`withdrawal :- ${Math.abs(movement)}`);\n//   }\n// }\n// for (const [i, mov] of movements.entries()) {\n//   if (mov > 0) {\n//     console.log(`Deposite number :   ${i + 1} ,your Deposite's :  ${mov}`);\n//   } else {\n//     console.log(`Withdrawal num:  ${i + 1} , Your Withdrawal :  ${Math.abs(mov)}`);\n//   }\n// }\n/////\nmovements.forEach(function (mov, i, arr) {\n  if (mov > 0) {\n    console.log(`Movement :${i + 1} ,your Deposite's :  ${mov}`);\n  } else {\n    console.log(`Movement :${i + 1} , Your Withdrawal :  ${Math.abs(mov)}`);\n  }\n  // console.log(arr);\n});\n\n///// WITH MAP AND SETS :- foreach loop///////\nconst currencies = new Map([\n  ['USD', 'United States dollar'],\n  ['EUR', 'Euro'],\n  ['GBP', 'Pound sterling'],\n]);\ncurrencies.forEach(function (value, key, map) {\n  console.log(`${value} is value ${key} is key`);\n});\nconsole.log(currencies);\nconst currenciesUnique = new Set(['USD', 'GBP', 'USD', 'EUR', 'EUR']);\nconsole.log(currenciesUnique);\ncurrenciesUnique.forEach(function (value, _, map) {\n  console.log(`${value}: ${value}`);\n});\n*/\n///////// BANkIST application////////\nconst account1 = {\n  owner: 'Jonas Schmedtmann',\n  movements: [200, 450, -400, 3000, -650, -130, 70, 1300],\n  interestRate: 1.2, // %\n  pin: 1111,\n};\n\nconst account2 = {\n  owner: 'Jessica Davis',\n  movements: [5000, 3400, -150, -790, -3210, -1000, 8500, -30],\n  interestRate: 1.5,\n  pin: 2222,\n};\n\nconst account3 = {\n  owner: 'Steven Thomas Williams',\n  movements: [200, -200, 340, -300, -20, 50, 400, -460],\n  interestRate: 0.7,\n  pin: 3333,\n};\n\nconst account4 = {\n  owner: 'Sarah Smith',\n  movements: [430, 1000, 700, 50, 90],\n  interestRate: 1,\n  pin: 4444,\n};\nconst account5 = {\n  owner: 'Aakash Yadav',\n  movements: [355, 777, 900, 36, 67, 68, 9, 90, -78, 345, 634, 24, 24],\n  interestRate: 1,\n  pin: 5555,\n};\n\nconst accounts = [account1, account2, account3, account4, account5];\n\n// Elements\nconst labelWelcome = document.querySelector('.welcome');\nconst labelDate = document.querySelector('.date');\nconst labelBalance = document.querySelector('.balance__value');\nconst labelSumIn = document.querySelector('.summary__value--in');\nconst labelSumOut = document.querySelector('.summary__value--out');\nconst labelSumInterest = document.querySelector('.summary__value--interest');\nconst labelTimer = document.querySelector('.timer');\n\nconst containerApp = document.querySelector('.app');\nconst containerMovements = document.querySelector('.movements');\n\nconst btnLogin = document.querySelector('.login__btn');\nconst btnTransfer = document.querySelector('.form__btn--transfer');\nconst btnLoan = document.querySelector('.form__btn--loan');\nconst btnClose = document.querySelector('.form__btn--close');\nconst btnSort = document.querySelector('.btn--sort');\n\nconst inputLoginUsername = document.querySelector('.login__input--user');\nconst inputLoginPin = document.querySelector('.login__input--pin');\nconst inputTransferTo = document.querySelector('.form__input--to');\nconst inputTransferAmount = document.querySelector('.form__input--amount');\nconst inputLoanAmount = document.querySelector('.form__input--loan-amount');\nconst inputCloseUsername = document.querySelector('.form__input--user');\nconst inputClosePin = document.querySelector('.form__input--pin');\n\n\nconst movements = [200, 450, -400, 3000, -650, -130, 70, 1300];\n\n/////// functions ////// \n// this is for display in grid row way the Deposite and withdrawal\nconst displayMovements = function (movements, sort = false) {\n  containerMovements.innerHTML = '';\n  const movs = sort ? movements.slice().sort((a, b) => a - b) : movements;// Remember pass ha shallow copy \n  movs.forEach(function (mov, i) {\n    const type = mov > 0 ? 'deposit' : 'withdrawal';\n    const html = `<div class=\"movements__row\">\n          <div class=\"movements__type movements__type--${type}\">${i + 1} ${type}</div>\n          <div class=\"movements__value\">${mov}€</div>`;\n    containerMovements.insertAdjacentHTML('afterbegin', html)\n  });\n};\n/// This function for total balance in bankist app\nconst calcTotalDisplayBalance = function (acc) {\n  acc.balance = acc.movements.reduce((acc, mov) => acc + mov, 0);\n  labelBalance.textContent = `${acc.balance} €`;\n}\n\n//Creating function for Username \nconst creatingusername = function (acc) {\n  acc.map(function (acc) {\n    acc.username = acc.owner.split(' ').map(name => name[0].toLowerCase()).join('');\n  });\n}\ncreatingusername(accounts);\n\n\n//// Creating Function for Summary \nconst calcDisplaySummary = function (movement) {\n  const SummaryIn = movement.movements.filter(mov => mov > 0)\n    .reduce((acc, mov) => acc + mov, 0);\n  labelSumIn.textContent = `${SummaryIn}€`;\n  const Summaryout = movement.movements.filter(mov => mov < 0)\n    .reduce((acc, mov) => acc + mov, 0);\n  labelSumOut.textContent = `${Math.abs(Summaryout)}€`;\n  const interestSum = movement.movements.filter(mov => mov > 0)\n    .map(mov => (mov * movement.interestRate) / 100)\n    .filter(mov => mov > 1)\n    .reduce((acc, mov) => acc + mov, 0);\n  labelSumInterest.textContent = `${interestSum}€`;\n};\n////// creating  UI\nconst updateUI = function (currentacc) {\n  //display the movements\n  displayMovements(currentacc.movements)\n  //display the total balance\n  calcTotalDisplayBalance(currentacc);\n  //display the summary\n  calcDisplaySummary(currentacc);\n}\n\n////// Event Handler ////\nlet currentaccount;\nbtnLogin.addEventListener('click', function (e) {\n  e.preventDefault();\n  console.log(\"login\");\n  currentaccount = accounts.find(acc => acc.username === inputLoginUsername.value);\n  // console.log(currentaccount);\n  if (currentaccount?.pin === Number(inputLoginPin.value)) {\n    labelWelcome.textContent = `Welcome back,${currentaccount.owner.split(' ')[0]}`;\n    containerApp.style.opacity = 100;\n    //clear the field pin wala\n    inputLoginPin.value = inputLoginUsername.value = '';\n    inputLoginPin.blur();\n    /// Display UI \n    updateUI(currentaccount);\n  };\n});\n/////// Implementing transfer ///////\nbtnTransfer.addEventListener('click', function (e) {\n  (e).preventDefault();\n\n  console.log('hlo');\n  const amount = Number(inputTransferAmount.value);\n  const receiverAcc = accounts.find(acc => acc.username === inputTransferTo.value);\n  console.log(receiverAcc);\n  inputTransferAmount.value = inputTransferTo.value = '';\n  if (amount > 0 && receiverAcc && currentaccount.balance >= amount && receiverAcc?.username !== currentaccount.username) {\n    // paise nikalna hai kike mai s\n    console.log('hollow');\n    currentaccount.movements.push(-amount);\n    // dalna kikse mai hai\n    receiverAcc.movements.push(amount);\n    /// Display UI\n    updateUI(currentaccount);\n  }\n});\n///// close the account and delte that account by splice  method//////\n\nbtnClose.addEventListener('click', function (e) {\n  e.preventDefault();\n  console.log('hey');\n  // Edha if check mai basically confirm kiya ki current account see match krte hai ki nahi quki kisi dusre ka account tho nhai delete kr sakte\n  if (currentaccount.username === inputCloseUsername.value && currentaccount.pin === Number(inputClosePin.value)) {\n    const index = accounts.findIndex(acc => acc.username === inputCloseUsername.value);\n    console.log(index);/// ye phe index access kiye account ka jo closeusername hai\n    /// this is for deleting the object with help of arr indirectly kr rahi hai\n    accounts.splice(index, 1);\n    /// remove the UI\n    containerApp.style.opacity = 0;\n  }\n  // this is for clearing the pin value and usernmae\n  inputClosePin.value = inputCloseUsername.value = '';\n});\n// const arrme = [1, 23, 45, 6, 76];\n// console.log(arrme.splice(1, 3));\n// console.log(arrme);\n\n///// using some i calculated the request loan //\nbtnLoan.addEventListener(\"click\", function (e) {\n  (e).preventDefault();\n  console.log(\"hup\");\n  const amount = Number(inputLoanAmount.value);\n  if (amount > 0 && currentaccount.movements.some(mov => mov >= amount * 0.1)) {\n    // This is for adding the value in movments that how much loan is taken\n    currentaccount.movements.push(amount);\n    // for display UI\n    updateUI(currentaccount);\n  };\n  inputLoanAmount.value = '';\n});\n//// sorting the deposite and withdrawal\nlet sorted = false;\nbtnSort.addEventListener('click', function (e) {\n  (e).preventDefault();\n  displayMovements(currentaccount.movements, !sorted);\n  sorted = !sorted;\n});\n\n///////////////////////////////////////\n// Coding Challenge #1\n\n/*\nJulia and Kate are doing a study on dogs. So each of them asked 5 dog owners about their dog's age, and stored the data into an array (one array for each). For now, they are just interested in knowing whether a dog is an adult or a puppy. A dog is an adult if it is at least 3 years old, and it's a puppy if it's less than 3 years old.\n\nCreate a function 'checkDogs', which accepts 2 arrays of dog's ages ('dogsJulia' and 'dogsKate'), and does the following things:\n\n1. Julia found out that the owners of the FIRST and the LAST TWO dogs actually have cats, not dogs! So create a shallow copy of Julia's array, and remove the cat ages from that copied array (because it's a bad practice to mutate function parameters)\n2. Create an array with both Julia's (corrected) and Kate's data\n3. For each remaining dog, log to the console whether it's an adult (\"Dog number 1 is an adult, and is 5 years old\") or a puppy (\"Dog number 2 is still a puppy 🐶\")\n4. Run the function for both test datasets\n\nHINT: Use tools from all lectures in this section so far 😉\n\nTEST DATA 1: Julia's data [3, 5, 2, 12, 7], Kate's data [4, 1, 15, 8, 3]\nTEST DATA 2: Julia's data [9, 16, 6, 8, 3], Kate's data [10, 5, 6, 1, 4]\n\nGOOD LUCK 😀\n\nconst Julia = [3, 5, 2, 12, 7];\nconst Kate = [4, 1, 15, 8, 3];\nconst checkDogs = function (dogsJulia, dogsKate) {\n  const correctjulia = dogsJulia.slice();//.slice isliye use kr rhai quki hum shallow copy bhej rhe hai\n  correctjulia.splice(0, 1);\n  correctjulia.splice(-2);\n  //correctjulia.splice(1,3) idhar hum ye bhi use kr sake hai for remove cat's at 1st and last tow cats\n  // console.log(correctjulia);\n  // console.log(dogsJulia);\n  const totaldogs = correctjulia.concat(dogsKate)\n  // console.log(totaldogs);\n  totaldogs.forEach(function (dogage, i) {\n    if (dogage >= 3) {\n      console.log(`\"Dog number ${i + 1} is an adult, and is ${dogage} years old\"`);\n    } else {\n      console.log(`\"Dog number ${i + 1} is still a puppy 🐶  and age is ${dogage} year old\"`);\n    }\n  });\n\n}\ncheckDogs(Julia, Kate);\ncheckDogs([9, 16, 6, 8, 3], [10, 5, 6, 1, 4]);\n\n\n\n\n\n///// THE MAP MEHTOD //////\nconst eurToUsd = 1.1;\n// const newarrbyMap = movements.map(function (mov) {\n//   return eurToUsd * mov;\n// });\n// console.log(newarrbyMap);\n// // By Arrow function\n// const byarrwMapmethod = movements.map(mov => eurToUsd * mov);\n// console.log(byarrwMapmethod);\n\n// const movementsDescriptions = movements.map(function (mov, i) {\n//   return `Movement :${i + 1} ${mov > 0 ? 'Deposite' : 'withdrawal'} ${Math.abs(mov)}`\n//   // if (mov > 0) {\n//   //   return `Movement :${i + 1} ,your Deposite's :  ${mov}`\n//   // } else {\n//   //   return `Movement :${i + 1} , Your Withdrawal :  ${Math.abs(mov)}`\n//   // }// remember always use less code and efficent so for now use ternary operator for this if-else loop\n// });\n// console.log(movementsDescriptions);\n/////// BY Arrow function\n// const byArrowMthod = movements.map((mov, i) => {\n//   if (mov > 0) {\n//     return `Movement :${i + 1} ,your Deposite's :  ${mov}`\n//   } else {\n//     return `Movement :${i + 1} , Your Withdrawal :  ${Math.abs(mov)}`\n//   }\n// });\nconst byArrowMthod = movements.map((mov, i) => `Movement: ${i + 1} ${mov > 0 ? 'Deposite' : 'Withrawal'} ${Math.abs(mov)}`)\nconsole.log(byArrowMthod);\n\n///  the above thing by for each loop\n// const byforEachNeedarr = [];\n// movements.forEach(function (mov) {\n//   return byforEachNeedarr.push(eurToUsd * mov);\n// })\n// console.log(byforEachNeedarr);// this disadvantage of forEach loop as compared to Map method\n\n\n\n////// The filter Method ///\nconst FilterDeposite = movements.filter(mov => mov > 0);\nconsole.log(FilterDeposite);\nconst FilerWithdrawal = movements.filter(mov => mov < 0);\nconsole.log(FilerWithdrawal);\nconst RegularDeposite = movements.filter(function (mov, i, arr) {\n  return mov > 0;\n});\nconsole.log(RegularDeposite);\n//// by for of loop\n// const Deposite = [];\n// for (let mov of movements) {\n//   if (mov > 0) {\n//     // console.log(mov);\n//     Deposite.push(mov);\n//   }\n// }\n// console.log(Deposite);\n\n*/\n\n///// The Reduce METHOD \n// const balanceRegular = movements.reduce(function (acc, mov, i, arr) {\n//   console.log(`Iteration ${i + 1} ${mov} ${acc}`);\n//   return acc + mov;\n// }, 0);\n// console.log(balanceRegular);\n\n// const balanceArrow = movements.reduce((acc, mov, i, arr) => {\n//   console.log(`${i + 1} ${mov} ${acc}`);\n//   return acc + mov;\n// }, 0);\n// cosnt balanceArrow = movements.reduce((acc,mov)=>acc+mov,0);\n// console.log(balanceArrow);\n\n// let num = 0;\n// for (const mov of movements) num += mov;\n// console.log(num);\n\n/////// how to max if calculate in function's \n// const max = movements.reduce((acc, mov) => {\n//   if (acc > mov) return acc;\n//   else return mov;\n// }, movements[0]);\n// console.log(max);\n\n\n\n// Coding Challenge #2\n\n/*\nLet's go back to Julia and Kate's study about dogs. This time, they want to convert dog ages to human ages and calculate the average age of the dogs in their study.\n\nCreate a function 'calcAverageHumanAge', which accepts an arrays of dog's ages ('ages'), and does the following things in order:\n\n1. Calculate the dog age in human years using the following formula: if the dog is <= 2 years old, humanAge = 2 * dogAge. If the dog is > 2 years old, humanAge = 16 + dogAge * 4.\n2. Exclude all dogs that are less than 18 human years old (which is the same as keeping dogs that are at least 18 years old)\n3. Calculate the average human age of all adult dogs (you should already know from other challenges how we calculate averages 😉)\n4. Run the function for both test datasets\n\nTEST DATA 1: [5, 2, 4, 1, 15, 8, 3]\nTEST DATA 2: [16, 6, 10, 5, 6, 1, 4]\n\nGOOD LUCK 😀\n\nconst calcAverageHumanAge = function (ages) {\n  /// idhar hum direct tornary operator use nahi kr sakte it will show NaN\n  const humanAge = ages.map(age => (age <= 2 ? 2 * age : 16 + age * 4));\n  console.log(humanAge);\n  const adults = humanAge.filter(age => age >= 18);\n  console.log(adults);\n  const dogagefromHumanage = humanAge.filter(age => age <= 18);\n  console.log(`Exclude or remove the dog age frome human age:-${dogagefromHumanage}`);\n  // const average = adults.reduce((acc, age) => acc + age, 0) / adults.length;\n  const average = adults.reduce(function (acc, age, i, arr) {\n    return acc + age / adults.length;\n  }, 0)\n\n  return average;\n};\nconst avg1 = calcAverageHumanAge([5, 2, 4, 1, 15, 8, 3]);\nconst avg2 = calcAverageHumanAge([16, 6, 10, 5, 6, 1, 4]);\nconsole.log(avg1, avg2);\n\n\n//////// The Magic of Chaining Method ////\nconst eurToUsd = 1.1;\n//// its like pipe line\nconst totalDepositsUSD = movements.filter(mov => mov > 0)\n  .map(mov => mov * eurToUsd).\n  reduce((acc, mov) => acc + mov, 0);\nconsole.log(totalDepositsUSD);\n*/\n\n\n///////////////////////////////////////\n// Coding Challenge #3\n\n/*\nRewrite the 'calcAverageHumanAge' function from the previous challenge, but this time as an arrow function, and using chaining!\n\nTEST DATA 1: [5, 2, 4, 1, 15, 8, 3]\nTEST DATA 2: [16, 6, 10, 5, 6, 1, 4]\n\nGOOD LUCK 😀\n\nconst calcAverageHumanAge = ages => {\n  const average = ages.map(age => (age <= 2 ? 2 * age : 16 + age * 4))\n    .filter(age => age >= 18)\n    .reduce((acc, mov, i, arr) => acc + mov / arr.length, 0);\n  return average;\n};\nconst avg1 = calcAverageHumanAge([5, 2, 4, 1, 15, 8, 3]);\nconst avg2 = calcAverageHumanAge([16, 6, 10, 5, 6, 1, 4]);\nconsole.log(avg1, avg2);\n\nconsole.log([5, 2, 4, 1, 15, 8, 3].length);\nconst forlen = [5, 2, 4, 1, 15, 8, 3];\nconst my = forlen.map((ele, i, arr) => arr.length);\nconsole.log(my);/// isme mrko for every element i get arr length in which by using ages.length i get the value of length that's why i get not same answer as arrow function\n\n\n///////// The Find method Brooo\nconsole.log(movements);\nconst findIndex = movements.find(mov => mov > 0);\nconsole.log(findIndex);\n\nconst account = accounts.find(acc => acc.interestRate === 1.2);\nconsole.log(account);// this give first index element\n\n// by for each loop\nfor (const acc of accounts) {\n  if (acc.interestRate === 1.2) console.log(acc);\n}\n\n//////  SOME  AND EVERY METHOD////\nconsole.log(movements);\nconsole.log(movements.includes(-400));\n/// some methohd\nconst deposite = movements.some(mov => mov > 0);\nconsole.log(deposite);// so its return true because it have positive and negative value both\nconsole.log(movements.some(mov => mov < 0));\n\n////// every method /// so it basically work for every vallue in it\nconsole.log(movements.every(mov => mov > 0));\nconsole.log(movements.every(mov => mov < 0));\nconsole.log(account4.movements.every(mov => mov > 0));\nconsole.log(account4.movements.every(mov => mov < 0));\nconsole.log(account4.movements.filter(mov => mov > 0));\n\n\n\n////// flat and flatmap ///\nconst arr = [1, [2, 34, [5, 6, 7], [75, 56, 7]]];\nconsole.log(arr.flat(4));\n/// flat is like nested array ko single element of array mai push karna and in multiple nested arr hai tho specific position pass kr do jaise ki upper pass kr rakhhi hai 4\nconst allmovmens = accounts.map(mov => mov.movements);\n// console.log(allmovmens.flat());\nconst combiningmovements = allmovmens.flat();\n// console.log(combiningmovements);\nconst totalofallmove = combiningmovements.reduce((acc, mov) => mov + acc, 0);\nconsole.log(totalofallmove);\n\n/// all above stuff in single code\nconst totalbalanceofmov = accounts.map(mov => mov.movements)\n  .flat()\n  .reduce((acc, mov) => acc + mov, 0);\nconsole.log(totalbalanceofmov);\n\n////// flat Map ye map wala kam and flat wala dono kr laita hai\n\nconst totalbalanceo = accounts.flatMap(acc => acc.movements)\n  .reduce((acc, mov) => acc + mov, 0);\nconsole.log(totalbalanceo);\n\n\n/// Sorting\n// console.log(movements);\nconst arr = ['VIkash', 'Aakash', 'Friends', 'Mom', 'Father'];\nconsole.log(arr.sort());\nconsole.log(movements);\n\nmovements.sort((a, b) => {\n  if (a > b) return 1;//increasing for all +ve value\n  if (b > a) return -1;// Decreasing for all -Ve value\n})\n// console.log(movements);\nmovements.sort((a, b) => a - b);// arrow decreaing order\nmovements.sort((a, b) => b - a);// arrow increasing order\n// console.log(movements);\n// return < 0, A, B (keep order)\n// return > 0, B, A (switch order)\nmovements.sort((a, b) => {\n  if (a > b) return 1;\n});\nconsole.log(movements);\nmovements.sort((a, b) => {\n  if (b > a) return -1;\n})\nconsole.log(movements);\n\n\n\n///////Ways of Creating an Array, Filling and from method on array// Mutable method hai ye\nconst array = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n// console.log(array.fill(1));\nconsole.log(array.fill(1, 4, 6));//isme last argument tak fill nhai kr rah jaise slice\nconsole.log(array.fill(3, 1, -2));\n\nconst x = new Array(10);// define's the length of arr\nconsole.log(x);\nx.fill(2, 1, 7);\nconsole.log(x);\n// from method\nconst z = Array.from({ length: 10 }, () => 4);\nconsole.log(z);\n\nconst f = Array.from(x, (_, i) => i + 1);\nconsole.log(f);\nconst j = Array.from({ length: 20 }, (_, i) => {\n  const g = Math.trunc(Math.random() * 6) + 1;\n  return g + i;\n});\nconsole.log(j);\nconst g = Array.from({ length: 4 }, (cur, i) => i + 1);\nconsole.log(g);\n\nlabelBalance.addEventListener('click', function (e) {\n  (e).preventDefault;\n  const MovementUI = [...document.querySelectorAll('.movements__value')];\n  console.log(MovementUI);\n  console.log('hii');\n  const movmentsUI = Array.from(document.querySelectorAll('.movements__value'),\n    el => Number(el.textContent.replace('€', '')));\n  console.log(movmentsUI);// this is the best method\n  const byme = Array.from(document.querySelectorAll('.movements__value'), el => Number(el.textContent.replace(\"€\", '')));\n  console.log(byme);// this is for practice above and this is same\n});\n\n\n/// some Array method for practiece\n// let a = 2;\n// console.log(++a);\n// console.log(a++);\n// console.log(a);\n// 1.\n// const bankDepositSum = accounts.flatMap(acc => acc.movements)\n//   .reduce((acc, mov) => mov > 0 ? acc + mov : acc, 0);//my technique also match\n// const bankDepositSum = accounts.flatMap(acc => acc.movements)\n//   .filter(mov => mov > 0).reduce((acc, mov) => acc + mov, 0);\n// console.log(bankDepositSum);\n\n// 2\n// const numDeposits1000 = accounts.flatMap(mov => mov.movements)\n//   .filter(mov => mov >= 1000).length;\nconst numDeposits1000 = accounts.flatMap(mov => mov.movements)\n  .reduce((acc, mov) => mov >= 1000 ? ++acc : acc, 0);// or idhar mai acc+1 like sakta tha but this is good\nconsole.log(numDeposits1000);\n//  3\nconst { Deposite, Withdrawal } = accounts.flatMap(mov => mov.movements)\n  .reduce((acc, mov) => {\n    mov > 0 ? acc.Deposite += mov : acc.Withdrawal += mov;\n    return acc;\n  }, { Deposite: 0, Withdrawal: 0 });\nconsole.log(Deposite, Withdrawal);\n\n// 4 converting the the title  impo\n// const convertTitleCase = (titel) => {\n//   const exceptions = ['a', 'an', 'and', 'the', 'but', 'or', 'on', 'in', 'with'];\n//   const titleCase = titel.toLowerCase().split(' ').map(titel => (exceptions.includes(titel) ? titel : titel[0].toUpperCase() + titel.slice(1).toLowerCase()));\n//   return titleCase;\n// }\n\nconst convertTitleCase = function (title) {\n  const capitzalize = str => str[0].toUpperCase() + str.slice(1);\n  const exceptions = ['a', 'an', 'and', 'the', 'but', 'or', 'on', 'in', 'with'];\n  const titleCase = title.toLowerCase().split(' ').map(word => (exceptions.includes(word) ? word : capitzalize(word))).join(' ');\n  return capitzalize(titleCase);\n}\nconsole.log(convertTitleCase('this is a nice title'));\nconsole.log(convertTitleCase('this is a LONG title but not too long'));\nconsole.log(convertTitleCase('and here is another title with an EXAMPLE'));\n\n*/\n///////////////////////////////////////\n// Coding Challenge #4\n\n/* \nJulia and Kate are still studying dogs, and this time they are studying if dogs are eating too much or too little.\nEating too much means the dog's current food portion is larger than the recommended portion, and eating too little is the opposite.\nEating an okay amount means the dog's current food portion is within a range 10% above and 10% below the recommended portion (see hint).\n\n1. Loop over the array containing dog objects, and for each dog, calculate the recommended food portion and add it to the object as a new property. Do NOT create a new array, simply loop over the array. Forumla: recommendedFood = weight ** 0.75 * 28. (The result is in grams of food, and the weight needs to be in kg)\n2. Find Sarah's dog and log to the console whether it's eating too much or too little. HINT: Some dogs have multiple owners, so you first need to find Sarah in the owners array, and so this one is a bit tricky (on purpose) 🤓\n3. Create an array containing all owners of dogs who eat too much ('ownersEatTooMuch') and an array with all owners of dogs who eat too little ('ownersEatTooLittle').\n4. Log a string to the console for each array created in 3., like this: \"Matilda and Alice and Bob's dogs eat too much!\" and \"Sarah and John and Michael's dogs eat too little!\"\n5. Log to the console whether there is any dog eating EXACTLY the amount of food that is recommended (just true or false)\n6. Log to the console whether there is any dog eating an OKAY amount of food (just true or false)\n7. Create an array containing the dogs that are eating an OKAY amount of food (try to reuse the condition used in 6.)\n8. Create a shallow copy of the dogs array and sort it by recommended food portion in an ascending order (keep in mind that the portions are inside the array's objects)\n\nHINT 1: Use many different tools to solve these challenges, you can use the summary lecture to choose between them 😉\nHINT 2: Being within a range 10% above and below the recommended portion means: current > (recommended * 0.90) && current < (recommended * 1.10). Basically, the current portion should be between 90% and 110% of the recommended portion.\n\nTEST DATA:\nconst dogs = [\n  { weight: 22, curFood: 250, owners: ['Alice', 'Bob'] },\n  { weight: 8, curFood: 200, owners: ['Matilda'] },\n  { weight: 13, curFood: 275, owners: ['Sarah', 'John'] },\n  { weight: 32, curFood: 340, owners: ['Michael'] }\n];\n\nGOOD LUCK 😀\n*/\nconst dogs = [\n  { weight: 22, curFood: 250, owners: ['Alice', 'Bob'] },\n  { weight: 8, curFood: 200, owners: ['Matilda'] },\n  { weight: 13, curFood: 275, owners: ['Sarah', 'John'] },\n  { weight: 32, curFood: 340, owners: ['Michael'] }\n];\n// 1\ndogs.forEach(ele => {\n  ele.recommendedFood = Math.trunc(ele.weight ** 0.75 * 28);\n});\nconsole.log(dogs);\n\n// 2 \nconst dogsarah = dogs.find(ele => ele.owners.includes('Sarah'));\nconsole.log(dogsarah);\nconsole.log(`Sarah dog's eats too ${dogsarah.curFood > dogsarah.recommendedFood ? 'much' : 'little'}`);\n\n// 3\nconst ownersEatTooMuch = dogs.filter(ele => ele.curFood > ele.recommendedFood).flatMap(ele => ele.owners);\nconsole.log(ownersEatTooMuch);\n\nconst ownersEatTooLittle = dogs.filter(ele => ele.curFood < ele.recommendedFood).flatMap(ele => ele.owners);\nconsole.log(ownersEatTooLittle);\n\n// 4\nconsole.log(`\"${ownersEatTooMuch.join(' and ')} dogs eat to much!\" and \"${ownersEatTooLittle.join(' and ')} dogs eat to little!\"`);\n\n// 5\n// const Exactlysame = dogs.findIndex(ele => ele.curFood === ele.recommendedFood ? true : false);\n// console.log(Exactlysame);\nconsole.log(dogs.some(dog => dog.curFood === dogs.recommendedFood));\n\n//6\n// current > (recommended * 0.90) && current < (recommended * 1.10)\nconst checkEatingOkay = dog =>\n  dog.curFood > dog.recommendedFood * 0.9 && dog.curFood < dog.recommendedFood * 1.1;\n\nconsole.log(dogs.some(checkEatingOkay));\n\n// 7.\nconsole.log(dogs.filter(checkEatingOkay));\n\n// 8.\n// sort it by recommended food portion in an ascending order [1,2,3]\nconst dogsSorted = dogs.slice().sort((a, b) => a.recFood - b.recFood);\nconsole.log(dogsSorted);\n\nconst dogsSortedmy = dogs.map(ele => ele).slice().sort((a, b) => a.recommendedFood - b.recommendedFood);\n\nconsole.log(dogsSortedmy);\n"],"names":[],"version":3,"file":"index.672d4772.js.map","sourceRoot":"/__parcel_source_root/"}