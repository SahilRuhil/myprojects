{"mappings":"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","sources":["script.js"],"sourcesContent":["'use strict';\n\nclass workout {\n    date = new Date();\n    Id = (Date.now() + '').slice(-10);\n    constructor(coords, distance, duration) {\n        this.coords = coords;// lat and lng\n        this.distance = distance;// km\n        this.duration = duration;// min\n    }\n    _setDescription() {\n        // prettier-ignore\n        const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n        this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${months[this.date.getMonth()]\n            } ${this.date.getDate()}`;\n    }\n};\nclass running extends workout {\n    type = \"running\";\n    constructor(coords, distance, duration, cadence) {\n        super(coords, distance, duration);\n        this.cadence = cadence;\n        this.calcPace();\n        this._setDescription();\n    }\n    calcPace() {\n        this.pace = this.duration / this.distance;// kn/h\n        return this.pace;\n    }\n}\nclass cycling extends workout {\n    type = \"cycling\";\n    constructor(coords, distance, duration, elevation) {\n        super(coords, distance, duration);\n        this.elevation = elevation;\n        this.calcspeed();\n        this._setDescription();\n    }\n    calcspeed() {\n        this.speed = this.distance / (this.duration / 60);\n        return this.speed;\n    }\n}\n// const run1 = new running([25, 34], 45, 555, 7);\n// const cyc1 = new cycling([23 / 56], 34, 53, 66);\n// console.log(run1, cyc1);\n\n\n// ARITECHTURE OF APPLICATION\nconst form = document.querySelector('.form');\nconst containerWorkouts = document.querySelector('.workouts');\nconst inputType = document.querySelector('.form__input--type');\nconst inputDistance = document.querySelector('.form__input--distance');\nconst inputDuration = document.querySelector('.form__input--duration');\nconst inputCadence = document.querySelector('.form__input--cadence');\nconst inputElevation = document.querySelector('.form__input--elevation');\nclass App {\n    #map;\n    #mapevent;\n    #workouts = [];\n    constructor() {\n        this._getposition();\n        form.addEventListener(\"submit\", this._newWorkout.bind(this));\n        inputType.addEventListener('change', this._toggleElevationfield.bind(this))\n    }\n    _getposition() {\n        if (navigator.geolocation)\n            navigator.geolocation.getCurrentPosition(\n                this._loadmap.bind(this), function () {\n                    alert(\"Could not get your position\");\n                }\n            );\n    }\n    _loadmap(position) {\n        // console.log(position);\n        const { latitude } = position.coords;\n        const { longitude } = position.coords;\n        // console.log(latitude, longitude);\n        // console.log(`https://www.google.com/maps/@28.741526232161608, 76.80597631566049,15z`);\n        const coords = [latitude, longitude];\n        this.#map = L.map('map').setView(coords, 13);\n\n        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        }).addTo(this.#map);\n\n\n        this.#map.on(\"click\", this._showForm.bind(this))\n    }\n    _showForm(mapE) {\n        form.classList.remove('hidden');\n        // cursore distance field pe chalajaega\n        inputDistance.focus();\n        this.#mapevent = mapE;\n    }\n    // hide form and input\n    _hideForm() {\n        //  hide form+remove input fields\n        inputCadence.value = inputDistance.value = inputDuration.value = inputElevation.value = '';\n\n        form.style.display = 'none';\n        form.classList.add(\"hidden\");\n        setTimeout(() => (form.style.display = 'grid'), 1000);\n    }\n    _toggleElevationfield() {\n        // need to change the cadance and elvation as per inputtype\n        inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\n        inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\n    }\n    _newWorkout(e) {\n        (e).preventDefault();\n        const isvalidNum = (...inputs) => inputs.every(inp => Number.isFinite(inp));\n        const ispositive = (...inputs) => inputs.every(inp => inp > 0);\n        // get data from input\n        const type = inputType.value;\n        const distance = +inputDistance.value;\n        const duration = +inputDuration.value;\n        const { lat, lng } = this.#mapevent.latlng;\n        let workout;\n\n        // IF Workout if running create running object\n        if (type === 'running') {\n            const cadance = +inputCadence.value;\n            // check validation positive and numbers\n            if (\n                // !Number.isFinite(distance) ||\n                // !Number.isFinite(duration) ||\n                // !Number.isFinite(cadence) // or we write like this\n                !isvalidNum(distance, duration, cadance) ||\n                !ispositive(distance, duration, cadance)) return alert(\"Invalid Input  of running\");\n            workout = new running([lat, lng], distance, duration, cadance);\n        }\n        // same for cycling create object for cycling and replace it by elvation\n        if (type === \"cycling\") {\n            const elevation = +inputElevation.value;\n            // check validation\n            if (!isvalidNum(distance, duration, elevation)\n                || !ispositive(distance, duration, elevation)) return alert(\"invalid details of cycling\");\n            workout = new cycling([lat, lng], distance, duration, elevation);\n        }\n        // Add new object to workout array\n        this.#workouts.push(workout);\n        console.log(workout);\n        // Render Workout on map as marker\n        this._RenderWorkoutMarker(workout);\n        // hide inputs and form\n        this._hideForm();\n        // Rendering Workout on list \n        this._renderWorkout(workout);\n    }\n    _RenderWorkoutMarker(workout) {\n        L.marker(workout.coords).addTo(this.#map)\n            .bindPopup(\n                L.popup({\n                    maxwidth: 250,\n                    minwidth: 100,\n                    autoClose: false,\n                    closeOnClick: false,\n                    className: `${workout.type}-popup`,\n                })\n            ).setPopupContent(\"workout\")\n            .openPopup();\n    }\n    _renderWorkout(workout) {\n        let html = `\n      <li class=\"workout workout--${workout.type}\" data-id=\"${workout.Id}\">\n        <h2 class=\"workout__title\">${workout.description}</h2>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">${workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'\n            }</span>\n          <span class=\"workout__value\">${workout.distance}</span>\n          <span class=\"workout__unit\">km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">‚è±</span>\n          <span class=\"workout__value\">${workout.duration}</span>\n          <span class=\"workout__unit\">min</span>\n        </div>\n    `;\n\n        if (workout.type === 'running')\n            html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">‚ö°Ô∏è</span>\n          <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\n          <span class=\"workout__unit\">min/km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">ü¶∂üèº</span>\n          <span class=\"workout__value\">${workout.cadence}</span>\n          <span class=\"workout__unit\">spm</span>\n        </div>\n      </li>\n      `;\n\n        if (workout.type === 'cycling')\n            html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">‚ö°Ô∏è</span>\n          <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\n          <span class=\"workout__unit\">km/h</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">‚õ∞</span>\n          <span class=\"workout__value\">${workout.elevation}</span>\n          <span class=\"workout__unit\">m</span>\n        </div>\n      </li>\n      `;\n\n        form.insertAdjacentHTML('afterend', html);\n    }\n\n}\nconst app = new App();\n\n\n"],"names":["workout","date","Date","Id","now","slice","constructor","coords","distance","duration","this","_setDescription","description","type","toUpperCase","getMonth","getDate","running","cadence","super","calcPace","pace","cycling","elevation","calcspeed","speed","form","document","querySelector","containerWorkouts","inputType","inputDistance","inputDuration","inputCadence","inputElevation","App","map","mapevent","workouts","_getposition","addEventListener","_newWorkout","bind","_toggleElevationfield","navigator","geolocation","getCurrentPosition","_loadmap","alert","position","latitude","longitude","L","setView","tileLayer","attribution","addTo","on","_showForm","mapE","classList","remove","focus","_hideForm","value","style","display","add","setTimeout","closest","toggle","e","preventDefault","isvalidNum","inputs","every","inp","Number","isFinite","ispositive","lat","lng","latlng","cadance","push","console","log","_RenderWorkoutMarker","_renderWorkout","marker","bindPopup","popup","maxwidth","minwidth","autoClose","closeOnClick","className","setPopupContent","openPopup","html","toFixed","insertAdjacentHTML","app"],"version":3,"file":"index.d802700c.js.map"}