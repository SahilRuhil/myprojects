"use strict";class workout{date=new Date;Id=(Date.now()+"").slice(-10);constructor(t,n,e){this.coords=t,this.distance=n,this.duration=e}_setDescription(){this.description=`${this.type[0].toUpperCase()}${this.type.slice(1)} on ${["January","February","March","April","May","June","July","August","September","October","November","December"][this.date.getMonth()]} ${this.date.getDate()}`}}class running extends workout{type="running";constructor(t,n,e,o){super(t,n,e),this.cadence=o,this.calcPace(),this._setDescription()}calcPace(){return this.pace=this.duration/this.distance,this.pace}}class cycling extends workout{type="cycling";constructor(t,n,e,o){super(t,n,e),this.elevation=o,this.calcspeed(),this._setDescription()}calcspeed(){return this.speed=this.distance/(this.duration/60),this.speed}}const form=document.querySelector(".form"),containerWorkouts=document.querySelector(".workouts"),inputType=document.querySelector(".form__input--type"),inputDistance=document.querySelector(".form__input--distance"),inputDuration=document.querySelector(".form__input--duration"),inputCadence=document.querySelector(".form__input--cadence"),inputElevation=document.querySelector(".form__input--elevation");class App{#t;#n;#e=[];constructor(){this._getposition(),form.addEventListener("submit",this._newWorkout.bind(this)),inputType.addEventListener("change",this._toggleElevationfield.bind(this))}_getposition(){navigator.geolocation&&navigator.geolocation.getCurrentPosition(this._loadmap.bind(this),(function(){alert("Could not get your position")}))}_loadmap(t){const{latitude:n}=t.coords,{longitude:e}=t.coords,o=[n,e];this.#t=L.map("map").setView(o,13),L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'}).addTo(this.#t),this.#t.on("click",this._showForm.bind(this))}_showForm(t){form.classList.remove("hidden"),inputDistance.focus(),this.#n=t}_hideForm(){inputCadence.value=inputDistance.value=inputDuration.value=inputElevation.value="",form.style.display="none",form.classList.add("hidden"),setTimeout((()=>form.style.display="grid"),1e3)}_toggleElevationfield(){inputElevation.closest(".form__row").classList.toggle("form__row--hidden"),inputCadence.closest(".form__row").classList.toggle("form__row--hidden")}_newWorkout(t){t.preventDefault();const n=(...t)=>t.every((t=>Number.isFinite(t))),e=(...t)=>t.every((t=>t>0)),o=inputType.value,s=+inputDistance.value,i=+inputDuration.value,{lat:a,lng:r}=this.#n.latlng;let u;if("running"===o){const t=+inputCadence.value;if(!n(s,i,t)||!e(s,i,t))return alert("Invalid Input  of running");u=new running([a,r],s,i,t)}if("cycling"===o){const t=+inputElevation.value;if(!n(s,i,t)||!e(s,i,t))return alert("invalid details of cycling");u=new cycling([a,r],s,i,t)}this.#e.push(u),console.log(u),this._RenderWorkoutMarker(u),this._hideForm(),this._renderWorkout(u)}_RenderWorkoutMarker(t){L.marker(t.coords).addTo(this.#t).bindPopup(L.popup({maxwidth:250,minwidth:100,autoClose:!1,closeOnClick:!1,className:`${t.type}-popup`})).setPopupContent("workout").openPopup()}_renderWorkout(t){let n=`\n      <li class="workout workout--${t.type}" data-id="${t.Id}">\n        <h2 class="workout__title">${t.description}</h2>\n        <div class="workout__details">\n          <span class="workout__icon">${"running"===t.type?"üèÉ‚Äç‚ôÇÔ∏è":"üö¥‚Äç‚ôÄÔ∏è"}</span>\n          <span class="workout__value">${t.distance}</span>\n          <span class="workout__unit">km</span>\n        </div>\n        <div class="workout__details">\n          <span class="workout__icon">‚è±</span>\n          <span class="workout__value">${t.duration}</span>\n          <span class="workout__unit">min</span>\n        </div>\n    `;"running"===t.type&&(n+=`\n        <div class="workout__details">\n          <span class="workout__icon">‚ö°Ô∏è</span>\n          <span class="workout__value">${t.pace.toFixed(1)}</span>\n          <span class="workout__unit">min/km</span>\n        </div>\n        <div class="workout__details">\n          <span class="workout__icon">ü¶∂üèº</span>\n          <span class="workout__value">${t.cadence}</span>\n          <span class="workout__unit">spm</span>\n        </div>\n      </li>\n      `),"cycling"===t.type&&(n+=`\n        <div class="workout__details">\n          <span class="workout__icon">‚ö°Ô∏è</span>\n          <span class="workout__value">${t.speed.toFixed(1)}</span>\n          <span class="workout__unit">km/h</span>\n        </div>\n        <div class="workout__details">\n          <span class="workout__icon">‚õ∞</span>\n          <span class="workout__value">${t.elevation}</span>\n          <span class="workout__unit">m</span>\n        </div>\n      </li>\n      `),form.insertAdjacentHTML("afterend",n)}}const app=new App;
//# sourceMappingURL=index.d802700c.js.map
